package db

import (
	"appengine"
	"appengine/datastore"
	"time"
)

type resource interface {
	//	Url() string
	StringId() string
	SetStringId(string) error
}

type entity interface {
	HasKey() bool
	Key() *datastore.Key
	SetKey(*datastore.Key)
	Parent() *datastore.Key
	SetParent(*datastore.Key)
	SetCreatedAt(time.Time)
}

type model interface {
	entity
	resource
}

type Clock func() time.Time

// Datastore Service that provides a set of
// operations to make it easy on you when
// working with appengine datastore
//
// It works along with db.Model in order to
// provide its features.
//
type Datastore struct {
	Context appengine.Context
	Clock   Clock
}

func NewDatastore(c appengine.Context) Datastore {
	return Datastore{c, time.Now}
}

// Create creates a new entity in datastore
// using the key generated by the keyProvider
func (this Datastore) Create(e entity) error {
	if err := this.resolveEntityKey(e, this.SetNewKey); err != nil {
		return err
	}

	e.SetCreatedAt(this.Clock())
	_, err := datastore.Put(this.Context, e.Key(), e)
	return err
}

// Update updated an entity in datastore
func (this Datastore) Update(e entity) error {
	if err := this.resolveEntityKey(e, this.ReconstructKey); err != nil {
		return err
	}
	_, err := datastore.Put(this.Context, e.Key(), e)
	return err
}

// Load loads entity data from datastore
func (this Datastore) Load(e entity) error {
	if err := this.resolveEntityKey(e, this.ReconstructKey); err != nil {
		return err
	}
	return datastore.Get(this.Context, e.Key(), e)
}

// Delete deletes an entity from datastore
func (this Datastore) Delete(e entity) error {
	if err := this.resolveEntityKey(e, this.ReconstructKey); err != nil {
		return err
	}
	return datastore.Delete(this.Context, e.Key())
}

// Query returns an instance of Querier
func (this Datastore) Query(q *Query) *Querier {
	return &Querier{this.Context, q}
}

// NewKeyFor generates a new datastore key for the given entity
//
// The Key components are derived from the entity struct through reflection
// Fields tagged with `db:"id"` are used in the key as a StringID if
// the field type is string, or IntID in case its type is any int type
//
// In case multiple fields are tagged with `db:"id"`, the first field
// is selected to be used as id in the key
//
// If no field is tagged, the key is generated using the default values
// for StringID and IntID, causing the key to be auto generated
func (this Datastore) SetNewKey(e entity) error {
	stringID, intID, err := ExtractEntityKeyIDs(e)
	if err != nil {
		return err
	}

	e.SetKey(datastore.NewKey(
		this.Context,
		ExtractEntityKind(e),
		stringID,
		intID,
		e.Parent(),
	))

	return nil
}

func (this Datastore) ReconstructKey(e entity) error {
	stringID, intID, err := ExtractEntityKeyIDs(e)
	if err != nil {
		return err
	}

	if stringID == "" && intID == 0 {
		return ErrMissingAutoGeneratedKey
	}

	e.SetKey(datastore.NewKey(
		this.Context,
		ExtractEntityKind(e),
		stringID,
		intID,
		e.Parent(),
	))

	return nil
}

func (this Datastore) resolveEntityKey(e entity, keyResolver func(entity) error) error {
	if !e.HasKey() {
		return keyResolver(e)
	}
	return nil
}
