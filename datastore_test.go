package db_test

import (
	"appengine/aetest"
	"github.com/drborges/datastore-model"
	"github.com/drborges/goexpect"
	"testing"
	"time"
	"appengine/datastore"
)

func TestDatastoreSetKeyForStringID(t *testing.T) {
	t.Parallel()
	c, _ := aetest.NewContext(nil)
	defer c.Close()

	d := db.NewDatastore(c)

	entity := new(EntityWithStringID)
	entity.StringID = "Diego"

	err := d.SetNewKey(entity)

	expect := goexpect.New(t)
	expect(err).ToBe(nil)
	expect(entity.Key().String()).ToBe("/EntityWithStringID,Diego")
}

func TestDatastoreSetKeyForIntID(t *testing.T) {
	t.Parallel()
	c, _ := aetest.NewContext(nil)
	defer c.Close()

	d := db.NewDatastore(c)

	entity := new(EntityWithIntID)
	entity.IntID = 123

	err := d.SetNewKey(entity)

	expect := goexpect.New(t)
	expect(err).ToBe(nil)
	expect(entity.Key().String()).ToBe("/EntityWithIntID,123")
}

func TestDatastoreSetKeyForMultipleTaggedFields(t *testing.T) {
	t.Parallel()
	c, _ := aetest.NewContext(nil)
	defer c.Close()

	d := db.NewDatastore(c)

	entity := new(EntityWithMultipleIDTags)
	entity.StringID = "Diego"
	entity.IntID = 123

	err := d.SetNewKey(entity)

	expect := goexpect.New(t)
	expect(err).ToBe(nil)
	expect(entity.Key().String()).ToBe("/EntityWithMultipleIDTags,123")
}

func TestDatastoreSetKeyForReturnsErrMissingStringId(t *testing.T) {
	t.Parallel()
	c, _ := aetest.NewContext(nil)
	defer c.Close()

	d := db.NewDatastore(c)

	entity := new(EntityWithStringID)

	err := d.SetNewKey(entity)

	expect := goexpect.New(t)
	expect(err).ToBe(db.ErrMissingStringId)
	expect(entity.Key()).ToBe((*datastore.Key)(nil))
}

func TestDatastoreSetKeyForReturnsErrMissingIntId(t *testing.T) {
	t.Parallel()
	c, _ := aetest.NewContext(nil)
	defer c.Close()

	d := db.NewDatastore(c)

	entity := new(EntityWithIntID)

	err := d.SetNewKey(entity)

	expect := goexpect.New(t)
	expect(err).ToBe(db.ErrMissingIntId)
	expect(entity.Key()).ToBe((*datastore.Key)(nil))
}

func TestDatastoreSetKeyForAutoGeneratedID(t *testing.T) {
	t.Parallel()
	c, _ := aetest.NewContext(nil)
	defer c.Close()

	d := db.NewDatastore(c)

	entity1 := new(EntityWithNoIDTag)
	err1 := d.SetNewKey(entity1)

	expect := goexpect.New(t)
	expect(err1).ToBe(nil)
	expect(entity1.Key().String()).ToBe("/EntityWithNoIDTag,0")
}

func TestDatastoreCreate(t *testing.T) {
	t.Parallel()
	c, _ := aetest.NewContext(nil)
	defer c.Close()

	entity := new(EntityWithStringID)
	entity.StringID = "StringID"

	createdAt := time.Now()
	clock := func () time.Time { return createdAt }

	err := db.Datastore{c, clock}.Create(entity)

	expect := goexpect.New(t)
	expect(err).ToBe(nil)
	expect(entity.CreatedAt.Format("02 Jan 06 15:04 MST")).ToBe(createdAt.Format("02 Jan 06 15:04 MST"))
	expect(entity.Key().String()).ToBe("/EntityWithStringID,StringID")
}

func TestDatastoreLoad(t *testing.T) {
	t.Parallel()
	c, _ := aetest.NewContext(nil)
	defer c.Close()

	d := db.NewDatastore(c)
	d.Create(diego)

	person := new(Person)
	person.Name = diego.Name
	err := d.Load(person)

	expect := goexpect.New(t)
	expect(err).ToBe(nil)
	expect(person.Name).ToBe(diego.Name)
	expect(person.Country).ToBe(diego.Country)
	expect(person.Key().String()).ToBe(diego.Key().String())
}

func TestDatastoreLoadEntityWithMissingAutoGeneratedKey(t *testing.T) {
	t.Parallel()
	c, _ := aetest.NewContext(nil)
	defer c.Close()

	entity := new(EntityWithNoIDTag)
	err := db.NewDatastore(c).Load(entity)

	expect := goexpect.New(t)
	expect(err).ToBe(db.ErrMissingAutoGeneratedKey)
	expect(entity.Key()).ToBe((*datastore.Key)(nil))
}

func TestDatastoreUpdate(t *testing.T) {
	t.Parallel()
	c, _ := aetest.NewContext(nil)
	defer c.Close()

	d := db.NewDatastore(c)

	d.Create(diego)

	diego.Country = "USA"
	err := d.Update(diego)

	person := new(Person)
	datastore.Get(c, diego.Key(), person)

	expect := goexpect.New(t)
	expect(err).ToBe(nil)
	expect(person.Country).ToBe("USA")
}

func TestDatastoreUpdateEntityWithMissingAutoGeneratedKey(t *testing.T) {
	t.Parallel()
	c, _ := aetest.NewContext(nil)
	defer c.Close()

	entity := new(EntityWithNoIDTag)
	err := db.NewDatastore(c).Update(entity)

	expect := goexpect.New(t)
	expect(err).ToBe(db.ErrMissingAutoGeneratedKey)
	expect(entity.Key()).ToBe((*datastore.Key)(nil))
}

func TestDatastoreDelete(t *testing.T) {
	t.Parallel()
	c, _ := aetest.NewContext(nil)
	defer c.Close()

	d := db.NewDatastore(c)

	entity := new(EntityWithNoIDTag)
	d.Create(entity)

	err := d.Delete(entity)

	expect := goexpect.New(t)
	expect(err).ToBe(nil)

	err = datastore.Get(c, entity.Key(), entity)
	expect(err).ToNotBe(nil)
}

func TestDatastoreDeleteEntityWithMissingAutoGeneratedKey(t *testing.T) {
	t.Parallel()
	c, _ := aetest.NewContext(nil)
	defer c.Close()

	entity := new(EntityWithNoIDTag)
	err := db.NewDatastore(c).Delete(entity)

	expect := goexpect.New(t)
	expect(err).ToBe(db.ErrMissingAutoGeneratedKey)
	expect(entity.Key()).ToBe((*datastore.Key)(nil))
}

func QueryAllSetKeysToMatchedItems(t *testing.T) {
	t.Parallel()
	c, _ := aetest.NewContext(nil)
	defer c.Close()

	d := db.NewDatastore(c)

	CreatePeople(d, diego, munjal, bruno)

	people := People{}
	err := d.Query(people.ByCountry("Brazil")).All(&people)

	expect := goexpect.New(t)
	expect(err).ToBe(nil)
	expect(len(people)).ToBe(2)
	expect(people[0].Key().String()).ToBe(bruno.Key().String())
	expect(people[1].Key().String()).ToBe(diego.Key().String())
}

func TestQueryFirstSetKeysToMatchedItem(t *testing.T) {
	t.Parallel()
	c, _ := aetest.NewContext(nil)
	defer c.Close()

	d := db.NewDatastore(c)

	CreatePeople(d, diego, munjal, bruno)

	person := new(Person)
	err := d.Query(People{}.ByCountry("Brazil")).First(person)

	expect := goexpect.New(t)
	expect(err).ToBe(nil)
	expect(person.Key().String()).ToBe(bruno.Key().String())
}
