package db_test

import (
	"appengine/aetest"
	"github.com/drborges/datastore-model"
	"github.com/drborges/goexpect"
	"testing"
)

type Person struct {
	db.Model
	Name    string `db:"id"`
	Country string
}

type Tag struct {
	db.Model
	Name  string
	IntID int `db:"id"`
}

type Post struct {
	db.Model
	Title, Description string
}

type Account struct {
	db.Model
	RegistrationNum int64  `db:"id"`
	Name            string `db:"id"`
}

func TestDatastoreNewKeyForStringID(t *testing.T) {
	t.Parallel()
	c, _ := aetest.NewContext(nil)
	defer c.Close()

	d := db.Datastore{c}

	person := new(Person)
	person.Name = "Diego"

	key := d.NewKeyFor(person)

	expect := goexpect.New(t)
	expect(key.String()).ToBe("/Person,Diego")
}

func TestDatastoreNewKeyForIntID(t *testing.T) {
	t.Parallel()
	c, _ := aetest.NewContext(nil)
	defer c.Close()

	d := db.Datastore{c}

	tag := new(Tag)
	tag.IntID = 123

	key := d.NewKeyFor(tag)

	expect := goexpect.New(t)
	expect(key.String()).ToBe("/Tag,123")
}

func TestDatastoreNewKeyForMultipleTaggedFields(t *testing.T) {
	t.Parallel()
	c, _ := aetest.NewContext(nil)
	defer c.Close()

	d := db.Datastore{c}

	account := new(Account)
	account.Name = "Diego"
	account.RegistrationNum = 123

	key := d.NewKeyFor(account)

	expect := goexpect.New(t)
	expect(key.String()).ToBe("/Account,123")
}

func TestDatastoreNewKeyForAutoGeneratedID(t *testing.T) {
	t.Parallel()
	c, _ := aetest.NewContext(nil)
	defer c.Close()

	d := db.Datastore{c}

	post := new(Post)

	key1 := d.NewKeyFor(post)
	key2 := d.NewKeyFor(post)

	expect := goexpect.New(t)
	expect(key1).ToNotBe(key2)
}

func TestDatastoreCreate(t *testing.T) {
	t.Parallel()
	c, _ := aetest.NewContext(nil)
	defer c.Close()

	d := db.Datastore{c}

	person := new(Person)
	person.Name = "Diego"
	person.Country = "Brazil"

	err := d.Create(person)

	expect := goexpect.New(t)
	expect(err).ToBe(nil)
	expect(person.Key().String()).ToBe("/Person,Diego")
}

func TestDatastoreCreateReturnsErrEntityExists(t *testing.T) {
	t.Parallel()
	c, _ := aetest.NewContext(nil)
	defer c.Close()

	d := db.Datastore{c}

	person := new(Person)
	person.Name = "Diego"
	person.Country = "Brazil"
	err := d.Create(person)

	expect := goexpect.New(t)
	expect(err).ToBe(nil)

	err = d.Create(person)
	expect(err).ToBe(db.ErrEntityExists)
}

func TestDatastoreUpdate(t *testing.T) {
	t.Parallel()
	c, _ := aetest.NewContext(nil)
	defer c.Close()

	d := db.Datastore{c}

	person := new(Person)
	person.Name = "Diego"
	person.Country = "Brazil"
	d.Create(person)

	person.Country = "US"
	err := d.Update(person)

	personFromDB := new(Person)
	personFromDB.SetKey(person.Key())
	d.Load(personFromDB)

	expect := goexpect.New(t)
	expect(err).ToBe(nil)
	expect(person.Country).ToBe(personFromDB.Country)
}

func TestDatastoreUpdateReturnsErrNoSuchEntity(t *testing.T) {
	t.Parallel()
	c, _ := aetest.NewContext(nil)
	defer c.Close()

	d := db.Datastore{c}

	person := new(Person)
	person.Name = "Diego"
	person.Country = "Brazil"
	err := d.Update(person)

	expect := goexpect.New(t)
	expect(err).ToBe(db.ErrNoSuchEntity)
}

func TestDatastoreDelete(t *testing.T) {
	t.Parallel()
	c, _ := aetest.NewContext(nil)
	defer c.Close()

	d := db.Datastore{c}

	person := new(Person)
	person.Name = "Diego"
	person.Country = "Brazil"
	d.Create(person)
	err := d.Delete(person)

	expect := goexpect.New(t)
	expect(err).ToBe(nil)

	personFromDB := new(Person)
	personFromDB.SetKey(person.Key())
	err = d.Load(personFromDB)
	expect(err).ToBe(db.ErrNoSuchEntity)
}

func TestDatastoreDeleteReturnsErrNoSuchEntity(t *testing.T) {
	t.Parallel()
	c, _ := aetest.NewContext(nil)
	defer c.Close()

	d := db.Datastore{c}

	person := new(Person)
	person.Name = "Diego"
	person.Country = "Brazil"
	err := d.Delete(person)

	expect := goexpect.New(t)
	expect(err).ToBe(db.ErrNoSuchEntity)
}
