package db_test

import (
	"appengine/aetest"
	"github.com/drborges/datastore-model"
	"github.com/drborges/goexpect"
	"testing"
)

func TestDatastoreNewKeyForStringID(t *testing.T) {
	t.Parallel()
	c, _ := aetest.NewContext(nil)
	defer c.Close()

	d := db.Datastore{c}

	person := new(EntityWithStringID)
	person.StringID = "Diego"

	key := d.NewKeyFor(person)

	expect := goexpect.New(t)
	expect(key.String()).ToBe("/EntityWithStringID,Diego")
}

func TestDatastoreNewKeyForIntID(t *testing.T) {
	t.Parallel()
	c, _ := aetest.NewContext(nil)
	defer c.Close()

	d := db.Datastore{c}

	entity := new(EntityWithIntID)
	entity.IntID = 123

	key := d.NewKeyFor(entity)

	expect := goexpect.New(t)
	expect(key.String()).ToBe("/EntityWithIntID,123")
}

func TestDatastoreNewKeyForMultipleTaggedFields(t *testing.T) {
	t.Parallel()
	c, _ := aetest.NewContext(nil)
	defer c.Close()

	d := db.Datastore{c}

	account := new(EntityWithMultipleIDTags)
	account.StringID = "Diego"
	account.IntID = 123

	key := d.NewKeyFor(account)

	expect := goexpect.New(t)
	expect(key.String()).ToBe("/EntityWithMultipleIDTags,123")
}

func TestDatastoreNewKeyForAutoGeneratedID(t *testing.T) {
	t.Parallel()
	c, _ := aetest.NewContext(nil)
	defer c.Close()

	d := db.Datastore{c}

	post := new(EntityWithNoIDTag)

	key1 := d.NewKeyFor(post)
	key2 := d.NewKeyFor(post)

	expect := goexpect.New(t)
	expect(key1).ToNotBe(key2)
}

func TestDatastoreCreate(t *testing.T) {
	t.Parallel()
	c, _ := aetest.NewContext(nil)
	defer c.Close()

	d := db.Datastore{c}

	person := new(EntityWithStringID)
	person.StringID = "Diego"
	err := d.Create(person)

	expect := goexpect.New(t)
	expect(err).ToBe(nil)
	expect(person.Key().String()).ToBe("/EntityWithStringID,Diego")
}

func TestDatastoreCreateReturnsErrEntityExists(t *testing.T) {
	t.Parallel()
	c, _ := aetest.NewContext(nil)
	defer c.Close()

	d := db.Datastore{c}

	person := new(EntityWithStringID)
	person.StringID = "Diego"
	err := d.Create(person)

	expect := goexpect.New(t)
	expect(err).ToBe(nil)

	err = d.Create(person)
	expect(err).ToBe(db.ErrEntityExists)
}

func TestDatastoreUpdate(t *testing.T) {
	t.Parallel()
	c, _ := aetest.NewContext(nil)
	defer c.Close()

	d := db.Datastore{c}

	person := new(EntityWithStringID)
	person.StringID = "Diego"
	d.Create(person)

	err := d.Update(person)

	personFromDB := new(EntityWithStringID)
	personFromDB.SetKey(person.Key())
	d.Load(personFromDB)

	expect := goexpect.New(t)
	expect(err).ToBe(nil)
}

func TestDatastoreUpdateReturnsErrNoSuchEntity(t *testing.T) {
	t.Parallel()
	c, _ := aetest.NewContext(nil)
	defer c.Close()

	d := db.Datastore{c}

	person := new(EntityWithStringID)
	person.StringID = "Diego"
	err := d.Update(person)

	expect := goexpect.New(t)
	expect(err).ToBe(db.ErrNoSuchEntity)
}

func TestDatastoreDelete(t *testing.T) {
	t.Parallel()
	c, _ := aetest.NewContext(nil)
	defer c.Close()

	d := db.Datastore{c}

	person := new(EntityWithStringID)
	person.StringID = "Diego"
	d.Create(person)
	err := d.Delete(person)

	expect := goexpect.New(t)
	expect(err).ToBe(nil)

	personFromDB := new(EntityWithStringID)
	personFromDB.SetKey(person.Key())
	err = d.Load(personFromDB)
	expect(err).ToBe(db.ErrNoSuchEntity)
}

func TestDatastoreDeleteReturnsErrNoSuchEntity(t *testing.T) {
	t.Parallel()
	c, _ := aetest.NewContext(nil)
	defer c.Close()

	d := db.Datastore{c}

	person := new(EntityWithStringID)
	person.StringID = "Diego"
	err := d.Delete(person)

	expect := goexpect.New(t)
	expect(err).ToBe(db.ErrNoSuchEntity)
}

func TestQueryAllSetKeysToMatchedItems(t *testing.T) {
	c, _ := aetest.NewContext(nil)
	defer c.Close()

	d := db.Datastore{c}

	CreatePeople(d, diego, munjal, bruno)

	people := People{}
	err := d.Query(people.ByCountry("Brazil")).All(&people)

	expect := goexpect.New(t)
	expect(err).ToBe(nil)
	expect(len(people)).ToBe(2)
	expect(people[0].Key().String()).ToBe(diego.Key().String())
	expect(people[1].Key().String()).ToBe(bruno.Key().String())
}

func TestQueryFirstSetKeysToMatchedItem(t *testing.T) {
	c, _ := aetest.NewContext(nil)
	defer c.Close()

	d := db.Datastore{c}

	CreatePeople(d, diego, munjal, bruno)

	person := new(Person)
	err := d.Query(People{}.ByCountry("Brazil")).First(person)

	expect := goexpect.New(t)
	expect(err).ToBe(nil)
	expect(person.Key().String()).ToBe(diego.Key().String())
}
