package db_test

import (
	"github.com/drborges/datastore-model"
	"github.com/drborges/goexpect"
	"testing"
	"appengine/datastore"
	"appengine/aetest"
)

func TestKeyResolverExtractMetadataDefaults(t *testing.T) {
	type Person struct {
		db.Model
		Name     string
		Country  string
	}

	person := new(Person)
	person.Name = "Borges"

	resolver := db.NewKeyResolver(nil)
	err := resolver.ExtractMetadataFrom(person)

	expect := goexpect.New(t)
	expect(err).ToBe(nil)
	expect(resolver.Metadata.Kind).ToBe("Person")
	expect(resolver.StringID).ToBe("")
	expect(resolver.IntID).ToBe(int64(0))
	expect(resolver.Metadata.HasParent).ToBe(false)
	expect(resolver.IsAutoGenerated()).ToBe(true)
	expect(resolver.Parent).ToBe((*datastore.Key)(nil))
}

func TestKeyResolverExtractMetadataFromEntityWithStringId(t *testing.T) {
	type Person struct {
		db.Model        `db:"People"`
		Name     string `db:"id"`
		Country  string
	}

	person := new(Person)
	person.Name = "Borges"

	resolver := db.NewKeyResolver(nil)
	err := resolver.ExtractMetadataFrom(person)

	expect := goexpect.New(t)
	expect(err).ToBe(nil)
	expect(resolver.Metadata.Kind).ToBe("People")
	expect(resolver.IntID).ToBe(int64(0))
	expect(resolver.Metadata.HasParent).ToBe(false)
	expect(resolver.StringID).ToBe("Borges")
	expect(resolver.IsAutoGenerated()).ToBe(false)
	expect(resolver.Parent).ToBe((*datastore.Key)(nil))
}

func TestKeyResolverExtractMetadataFromEntityWithMissingStringId(t *testing.T) {
	type Person struct {
		db.Model        `db:"People"`
		Name     string `db:"id"`
		Country  string
	}

	err := db.NewKeyResolver(nil).ExtractMetadataFrom(new(Person))

	expect := goexpect.New(t)
	expect(err).ToBe(db.ErrMissingStringId)
}

func TestKeyResolverExtractMetadataFromEntityWithIntId(t *testing.T) {
	type CreditCard struct {
		db.Model   `db:"CreditCards"`
		Number int `db:"id"`
		Owner  string
	}

	card := new(CreditCard)
	card.Number = 123123

	resolver := db.NewKeyResolver(nil)
	err := resolver.ExtractMetadataFrom(card)

	expect := goexpect.New(t)
	expect(err).ToBe(nil)
	expect(resolver.Metadata.Kind).ToBe("CreditCards")
	expect(resolver.StringID).ToBe("")
	expect(resolver.Metadata.HasParent).ToBe(false)
	expect(resolver.IntID).ToBe(int64(123123))
	expect(resolver.IsAutoGenerated()).ToBe(false)
	expect(resolver.Parent).ToBe((*datastore.Key)(nil))
}

func TestKeyResolverExtractMetadataFromEntityWithMissingIntId(t *testing.T) {
	type CreditCard struct {
		db.Model   `db:"CreditCards"`
		Number int `db:"id"`
		Owner  string
	}

	err := db.NewKeyResolver(nil).ExtractMetadataFrom(new(CreditCard))

	expect := goexpect.New(t)
	expect(err).ToBe(db.ErrMissingIntId)
}

func TestKeyResolverExtractMetadataFromEntityWithMultipleIdTags(t *testing.T) {
	type CreditCard struct {
		db.Model
		Number int    `db:"id"`
		Owner  string `db:"id"`
	}

	card := new(CreditCard)
	card.Number = 123123
	card.Owner = "Borges"

	resolver := db.NewKeyResolver(nil)
	err := resolver.ExtractMetadataFrom(card)

	expect := goexpect.New(t)
	expect(err).ToBe(nil)
	expect(resolver.Metadata.Kind).ToBe("CreditCard")
	expect(resolver.StringID).ToBe("")
	expect(resolver.Metadata.HasParent).ToBe(false)
	expect(resolver.IntID).ToBe(int64(123123))
	expect(resolver.IsAutoGenerated()).ToBe(false)
	expect(resolver.Parent).ToBe((*datastore.Key)(nil))
}

func TestKeyResolverExtractMetadataFromEntityWithParentKey(t *testing.T) {
	c, _ := aetest.NewContext(nil)
	defer c.Close()

	type CreditCard struct {
		db.Model      `db:",has_parent"`
		Number int    `db:"id"`
		Owner  string
	}

	parentKey := datastore.NewIncompleteKey(c, "Parent", nil)
	card := new(CreditCard)
	card.Number = 123123
	card.SetParent(parentKey)

	resolver := db.NewKeyResolver(nil)
	err := resolver.ExtractMetadataFrom(card)

	expect := goexpect.New(t)
	expect(err).ToBe(nil)
	expect(resolver.Metadata.HasParent).ToBe(true)
	expect(resolver.Parent).ToBe(parentKey)
}

func TestKeyResolverExtractMetadataFromEntityWithMissingParentKey(t *testing.T) {
	type CreditCard struct {
		db.Model      `db:",has_parent"`
		Number int    `db:"id"`
		Owner  string
	}

	card := new(CreditCard)
	card.Number = 123123

	resolver := db.NewKeyResolver(nil)
	err := resolver.ExtractMetadataFrom(card)

	expect := goexpect.New(t)
	expect(err).ToBe(db.ErrMissingParentKey)
	expect(resolver.Metadata.HasParent).ToBe(true)
	expect(resolver.Parent).ToBe((*datastore.Key)(nil))
}

func TestKeyResolverResolve(t *testing.T) {
	c, _ := aetest.NewContext(nil)
	defer c.Close()

	type CreditCard struct {
		db.Model      `db:", has_parent"`
		Number int    `db:"id"`
		Owner  string
	}

	parentKey := datastore.NewKey(c, "People", "Borges", 0, nil)
	card := new(CreditCard)
	card.Number = 123123
	card.SetParent(parentKey)

	err := db.NewKeyResolver(c).Resolve(card)

	expect := goexpect.New(t)
	expect(err).ToBe(nil)
	expect(card.Key().String()).ToBe("/People,Borges/CreditCard,123123")
}

func TestKeyResolverResolvesKeyMetadataInfoForEntityWithKeyAlreadySet(t *testing.T) {
	c, _ := aetest.NewContext(nil)
	defer c.Close()

	type Tag struct {
		db.Model
		Name string `db:"id"`
	}

	tag := &Tag{Name: "golang"}
	db.NewKeyResolver(c).Resolve(tag)
	resolverForEntityWithKey := db.NewKeyResolver(c)
	err := resolverForEntityWithKey.Resolve(tag)

	expect := goexpect.New(t)
	expect(err).ToBe(nil)
	expect(resolverForEntityWithKey.IntID).ToBe(int64(0))
	expect(resolverForEntityWithKey.Metadata.Kind).ToBe("Tag")
	expect(resolverForEntityWithKey.Metadata.HasParent).ToBe(false)
	expect(resolverForEntityWithKey.StringID).ToBe("golang")
	expect(resolverForEntityWithKey.IsAutoGenerated()).ToBe(false)
	expect(resolverForEntityWithKey.Parent).ToBe((*datastore.Key)(nil))
}

